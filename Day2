\xA=\n(new Line)
\xB=\v(vertical tab)
\xC=\f(form feed)
\xD=\r(carriage return)
\xG="compilation error" //Clearly, \x is not followed by hexa digits( A - F ).

#include<stdio.h>
int main()
{
	printf("ABCD\xA");
	printf("EFG");
	return 0;
}
output:ABCD
       EFG
Explanation
Alternative form of \n is \xA (new line).

#include<stdio.h>
int main()
{
	printf("ABCD\xB");
	printf("EFG");
	return 0;
}
output:ABCD♂EFG
Explanation
Alternative form of \v is \xB (vertical tab).


#include<stdio.h>
int main()
{
	printf("ABCD\xC");
	printf("EFG");
	return 0;
}
output:. ABCD♀EFG
Explanation
Alternative form of \f is \xC (form feed)

#include<stdio.h>
int main()
{
	printf("ABCD\xD");
	printf("EFG");
	return 0;
}
output: EFGD
Explanation
Alternative form of \r is \xD (carriage return).

#include<stdio.h>
int main()
{
	char ch[20] = "abcdefghijklm";
	printf("\n%5.2s",ch);
	return 0;
}
output:    ab
Explanation
5 space followed by ab ie( 5.2 ).


#include<stdio.h>
int main()
{
	char *ptr = "India%s";
	printf(ptr);
	return 0;
}
output:india
Explanation
Clearly, printf("India%s"); prints India. Here %s is neglected as there is nothing declared on the right most side of printf(); in string format.

#include<stdio.h>
int main(){
	char str[25];
	printf(" %d ",printf("c-aptitude"));
	return 0;
}
output:c-aptitude  10

#include<stdio.h>
# define loop while(true)
int main()
{
	loop;  
	printf("c-aptitude");
	return 0;
}
output:
 program never ends
 
 
#include<stdio.h>
	int main() {
		printf("%d", 5.25);
		return 0;
	}
op:0

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
	int main() {
		printf("%d",(int)5.25);
		system("pause");
		return 0;
	}
  op:5
  
  
  
#include<stdio.h>
	int main() {
		int a, b;
		printf("%d", scanf_s("%d %d", &a, &b));
		system("pause");
		return 0;
	}
output:2

#include<stdio.h>
static struct student
{
	int a;
	int b;
}struct_var{2,3};
int main()
{
	printf("%d %d",struct_var.a,struct_var.b);
	return 0;
}
output=2,3

#include<stdio.h>
int main()
{
	int a = 5;
	printf("%d"+1,a);
	return 0;
}
output:d

#include<stdio.h>
int main()
{
	int a = 5;
	printf("%dha"+2,a);
	return 0;
}
output:ha

#include<stdio.h>
int main()
{
	static int arr[5],i;
	for(i=0;i<=5;i++)
	printf("%d",arr[i] = 1);
	return 0;
}
output:111111
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
extern int num;
	int main() {
		printf("%d", num);
		system("pause");
		return 0;
	}
	int num = 20;
op:20


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
extern  num;
int main() {
	printf("%d", num);
	system("pause");
	return 0;
}
int num = 20;


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
	struct num {
		int num;
	};
	struct num key = { 25 };
	printf("%d", key.num);
	system("pause");
	return 0;
}
int num = 20;

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
	printf("%d", EOF);
	system("pause");
	return 0;
}


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
	int scanf = 13;
	printf("%d", scanf);
	system("pause");
	return 0;
}
op:13


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
	char printf[25] = "printf";
	puts(printf);
	system("pause");
	return 0;
}

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
	int main = 47;
	printf("%d", main);
	system("pause");
	return 0;
}op:47

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
	extern num;
	printf("%d", num);
	system("pause");
	return 0;
}
int num = 36;



#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
	int xyz = 20;
	{
		int xyz = 40;
	}
	printf("%d", xyz);
	system("pause");
	return 0;
}
int num = 36;

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
	char arr[] = "Cat";
	*arr = 'B';
	printf("%s", arr);
	system("pause");
	return 0;
}
op:Bat



#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
	char *ptr = "Cat";
	*ptr= 'B';
	printf("%s", ptr);
	system("pause");
	return 0;
}
op:Run time errror


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
	char arr1[50];
	char arr2[50] = "hello"
	arr1 = arr2;
	printf("%s", arr1);
	system("pause");
	return 0;
}
op:compilation error


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
	char arr1[50]="hello";
	char arr2[50] = "hello";
	if (arr1 = arr2)
	{
		
	}
	system("pause");
	return 0;
}


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
	char *ptr, **ptr1;
	printf("%u", sizeof(ptr));
	printf("%u", sizeof(ptr1));
	system("pause");
	return 0;
}




Diffrent Types of constant:
1.define constant
   #define x 10
   main()
   {
   
   printf("%d",x);
   #undef x //undefining x
   }
2.memory constant
3.literal constant


macro
inclusion
compiler contro directives



#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define x 10;
int main() {
#define x 100;
	printf("%d", x);
	system("pause");
	return 0;
}


#include<stdio.h>
int main()
{
	char num = '\010';
	printf("%d", num);
	return 0;
}

op:8

#include<stdio.h>
int main()
{
	void  num=10;
	printf("%v", num);
	return 0;
}
op:compilation error bcz Void is not a valid data type for declaring variables.


#include<stdio.h>
int main()
{
	void *ptr;
	int  num = 10;
	ptr = &num;
	printf("%d", ptr);
	return 0;
}
op:Adress
 void is a valid for declaring pointer variable *ptr thus printf displays the address of a normal variable num


##include<stdio.h>
int main()
{
	printf("%d\t",sizeof(2.5));
	printf("%d\t",sizeof(2));
	printf("%d",sizeof('A'));
	return 0;
}
output:8 4 1


#include<stdio.h>
int main(){
	signed a;
	unsigned b;
	a = 6u + -16 + 16u + -6;
	b = a + 1;
	if(a == b)
	printf("%d %d",a,b);
	else
	printf("%u %u",a, b);
	return 0;
}
output:0 1

enum is applied only for integers
enum fruits{apple,bannana};

#include<stdio.h>
int main(){
	float me = 5.25;
	double you = 5.25;
	if(me == you)
		printf("I love U");
	else
		printf("I hate U");
	return 0;
}
output: I hate U

#include<stdio.h>
int main()
{
	extern int num;
	num = 5;
	printf("%d", num);
	return 0;
}
output:Linker Error


#include<stdio.h>
int main(){
	char *ptr;
	printf("%d %d", sizeof(*ptr), sizeof(ptr));
	return 0;
}
output:1 4


#include<stdio.h>
int main(){
	int num = - -2;
	printf("num = %d", num);
	return 0;
}
output:2


interupt //odd
register
extern
huge //extend memmory
Extern, huge, registers are all the modifiers of data types in C. Interrupt is also a modifier data type, 
but we misspelled the word as interupt

#include<stdio.h>
int main()
{
	float a = 5.0;
	printf ("Result is = %d ", (24 / 5) * a);
	return 0;
}
output:0

#include<stdio.h>
int main() {
	10;
	printf("%d", 10);
	system("pause");
	return 0;
}
output:10

#include<stdio.h>
int main()
{
	enum fruits{ apple, mango } ;
	printf("%d %d", apple, mango);	
	return 0;
}
output:0 1


#include<stdio.h>
int main()
{
	char num = 127;
	num = num + 1;
	printf("%d", num);
	return 0;
}

output:-128

#include<stdio.h>
int main()
{
	extern int num;
	printf("%d", num);
	return 0;
}
int num = 10;
output:10

#include<stdio.h>
int main()
{
	int size = sizeof(volatile) + sizeof(const);
	printf("%d",++size);
	return 0;
}

op:output not predictable bcz volatile // 9


#include<stdio.h>
int main()
{
	static int num = 6;
	printf("%d ",num--);
	if(num)
	main();
	return 0;
}
output:6 5 4 3 2 1

#include<stdio.h>
int main()
{
	if (sizeof(char) > -12)
	printf("yes");
	else
	printf("No");
	return 0;
}
output:no
Explanation:
if negative integers are given it will loop through its range 0 to 65,535. i.e) -12 is equal to 65524.

#include<stdio.h>
int main()
{
	printf(" %%% ");
	return 0;
}
output:%


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
float x=3.14;
double y=3.14;
printf("%f %ff",x,y);
	return 0;
}
output:3.140000 3.140000f

#include<stdio.h>
int main()
{
	static int num = 3;
	if(--num)
	{
		main();
		printf("%d ",num);
	}
	return 0;
}
output:0 0

#include<stdio.h>
int main()
{
	typedef int num;
	num num1 = 5;
	printf("%d", num1);
	return 0;
}
output:5

#include<stdio.h>
int main()
{
	int num = 8;
	printf ("%d %d", num << 1, num >> 1);
	return 0;
}
output:16 4


#include<stdio.h>
int main()
{
	int i = 5;
	int a = ++i + ++i;
	printf("%d",a);
	return 0;
}
output:14

#include<stdio.h>
int main()
{
	int i = 5;
	int a = ++i + ++i + ++i;
	printf("%d",a);
	return 0;
}
output:22
a = ++i + ++i + ++i;
a = 6 + ++i + ++i
a = 6 + 7 + ++i
a = 7 + 7 + ++i
a = 7 + 7 + 8
a = 7 + 7 + 8
Finally a = 22


#include<stdio.h>
int main()
{
	int i = 5;
	int a = ++i + ++i + ++i + ++i;
	printf("%d",a);
	return 0;
}
output:31 


#include<stdio.h>
int main(){
	int i = 16;
	i =! i > 15;
	printf("i = %d",i);
	return 0;
}
output:0

#include<stdio.h>
int main()
{
	int i = 5;
	int a = --i + --i;
	printf("%d",a);
	return 0;
}
output:6

#include<stdio.h>
int main()
{
	int i = 5;
	int a = --i + --i + --i;
	printf("%d",a);
	return 0;
}
output:8

#include<stdio.h>
int main()
{
	int i = 5;
	int a = --i - --i - --i - --i;
	printf("%d",a);
	return 0;
}
output:-3

#include<stdio.h>
int main()
{
	int a = 2, b = 2, c = 0, d = 2, m;
	m = a++ && b++ && c++ || d++;
	printf("%d %d %d %d %d",a, b, c, d, m);
	return 0;
}
output:3 3 1 3 1


#include<stdio.h>
int main()
{
int i = 5;
int a = --i + ++i - i-- + --i;
printf("%d",a);
return 0;
}
output:8

#include<stdio.h>
int main()
{
	int a = 5;
	a = 1, 2, 3;
	printf("%d", a);
	return 0;
}
output:1

#include<stdio.h>
int main()
{
	int a;
	a = (1, 2, 3);
	printf("%d", a);
	return 0;
}
output:3

#include<stdio.h>
int main()
{
	unsigned int num = -4;
	printf("%d", ~num);
	return 0;
}
output
int num = -4;
which is num = -100 (in binary 0's and 1's)
~num = +011 (in binary 0's and 1's)
~num = 3



//own
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
int a=10U + 11;
printf("%d",a);
	return 0;
}
//own
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
int a=100U + 11 + 100L ;
printf("%d",a);
	return 0;
}

Control statements(conditional statements):-
repetition:
    Try to repeat multiple times use control loops
    1.for(intilization,condition,increment/decrement)
    2.while(condition)//one form of for loop
    3.dowhile (atleast one condition is check)
       do{
          }while(condition)
        
resuing:
    f()//example
    
 #include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
if(true)
{
    printf("hello");
}
else{
    printf("hellop");
}
	return 0;
}
op:hellop


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
char str[]="\0";
if(printf("%s",str))
printf("In");
else
printf("else");
	return 0;
}
op=else

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
if(printf("0"))
printf("In");
else
printf("else");
	return 0;
}


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
int i=5,j=5;
if(i==j);
printf("equal");
else
printf("notequal");
	return 0;
}
op:compilation error

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
int i=5,j=5;
if(i==j);
printf("equal");

	return 0;
}
op:equal //after the if block bcz equal printing


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
int i=25;
if(i==25);
i=50;
if(i==25)
i=i+1;
else
i=i+1;
printf("%d",i);

	return 0;
}


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
int i=2;
if(i==(1,2))
printf("hai");
else
printf("else");

	return 0;
}
op:hai

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
if(sizeof('\0'))
printf("yes");
else
printf("no");

	return 0;
}
op:yes


new question in techinal:
1
2 6
3 7 10
4 8 11 13
5 9 12 14 15
program://own
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
    int k=1,s=4,m;
for(int i=1;i<=5;i++)
{
    m=k;
    for(int j=1;j<=i;j++)
    {
        printf("%d ",k);
        k=k+s;
        s--;
    
    }
    k=m;
    s=4;
    k++;
    printf("\n");
}
	return 0;
}



#include<stdio.h>
int main(void)
{
	int arr[5] = { 1, 2, 3, 5, 7 };
	int *ptr = (&arr + 1);
	printf("%d %d\n", *(arr + 1), *(ptr - 1));
	return 0;
}
ouput:2 7


#include<stdio.h>
int main()
{
	int a[][3] = {0, 1, 2, 3, 4, 5};
	int (*ptr)[3] = a;
	printf("%d %d ", (*ptr)[0], (*ptr)[1]);
	++ptr;
	printf("%d %d\n", (*ptr)[0], (*ptr)[1]);
	return 0;
}
output:0 1 3 4


#include<stdio.h>
int main()
{
	char temp;
	char arr[10] = {1, 2, 3, 4, 5, 6, 9, 8};
	temp = (arr + 1)[2];
	printf("%d\n", temp);
	return 0;
}
output:4






//print 5 contains in a[4][][]
#include<stdio.h>
int main()
{
	int a[1][2][3] = {0};
	a[0][1][2] = 5;
	printf("%d",*(*(*(a+0)+1)+2));
	return 0;
}
output:printf("%d",*(*(*(a+0)+1)+2));

#include<stdio.h>
void fun(char**);
int main()
{
	char *arr[] = { "bat", "cat", "fat", "hat", "mat", "pat" };
	fun(arr);
	return 0;
}
void fun(char **p)
{
	char *t;
	t = (p += sizeof(int))[-1];
	printf("%s\n", t);
}
output:hat

#include<stdio.h>
int main()
{
	int arr[5][5][5] = {0};
	printf("%d", ( &arr+1 - &arr ));
	return 0;
}
output:1

#include<stdio.h>
void fun(int[][3]);
int main(void)
{
	int arr[3][3] = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };
	fun(arr);
	printf("%d\n", arr[2][1]);
	return 0;
}
void fun(int b[][3])
{
	++b;
	b[1][1] = 15;
}
output:15

#include<stdio.h>
int main(){
	int rows = 3, colums = 4, i, j, k;
	int a[3][4] = {1, 2, 3, 5, 7};
	i = j = k = 00;
	for(i = 0;i<rows;i++)
	for(j = 0;j<colums;j++)
	if(a[k][j]<k)
	k = a[i][j];
	printf("%d\n", k);
	return 0;
}
output:0

int far *ptr, far *ptr1//to extend the emmory size

int a[5][5] //25* 2=50 size //2bytes 

num=10
*p=10
**q=10
char str[3]='A','B','C','\0'; compilation error
char str[4]='A','B','C','\0';

for(i=0;str[i];i++)
putchar(str[i])

scanf("%s",str); //non- homogenous input function
gets(str)//homogenous input function
puts(str)//print string

char *str="cse"; ///how much memory what u want it allocates it
gets(str)                    ""



write a program to accept the string and display the word in a string in reverse order 
input:
The CSE students
output:
students CSE the



Write a logic to find binary substring in a given text of binary string
program://editing in progress
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main() {
	char str[50];
	char s[50];
	int j, k, len;
	gets(str);
	gets(s);
	for (int i = 0; str[i]; i++)
	{
		j = i;
		len = strlen(s);
		 k = 0;
		while ( j > (i + len+1) && (k<len) && str[j] == s[k])
		{
			j++;
			k++;
		}
		if (k == len)
		{
			printf("yes");
		}
	}
	
	return 0;
}



#include<stdio.h>
int main()
{
	int arr[ ]={1.2, 2.4, 3.6, 4.8, 5};
	int j, *ptr = arr;
	for(j = 0;j<5;j++)
	{
	printf("%d ", *arr);
	++ptr;
	}
}
output:1 1 1 1 1

#include<stdio.h>
int main()
{
	int i = 0;
	printf("Hello"); 
	char s[4] = {'\b', '\t', '\r', '\n'};
	for(i = 0;i<4;i++){
	printf("%c", s[i]);	
}
return 0;
}
output:Hell

#include<stdio.h>
int main()
{
	int i = 0;
	printf("Hello"); 
	char s[4] = {'\b', '\r', '\t', '\n'};
	for(i = 0;i<4;i++)
	{
		printf("%c", s[i]);	
	}
	return 0;
}
output:No Output(8 space is outputted)

#include<stdio.h>
int main()
{
	static int a[ ] = {0, 1, 2, 3, 4};
	int *p[ ] = {a, a + 1, a + 2, a + 3, a + 4};
	int **ptr =  p;
	++*ptr;
	printf("%d  %d  %d", ptr - p, *ptr - a, **ptr);
	return 0;
}
output:0 1 1

#include<stdio.h>
int main()
{
	int i = 0;
	char s[4] = {'\0', '\0', '\0', '\0'};
	for(i = 0;i<4;i++)
	{
		printf("%c", s[i]);	
	}
	return 0;
}
output:no output


#include<stdio.h>
int main()
{
	char s[] = {'a', 'b', 'c', '\n', 'c', '\0'};
	char *p, *str, *str1;
	p = &s[3];
	str = p;
	str1 = s;
	printf("%d", ++*p + ++*str1-32);
	return 0;
}
output:77
Explanation:++*p=11 and ++*str1-32=66 =77


#include<stdio.h>
int main()
{
	int arr[2] = {1, 2, 3, 4, 5};
	printf("%d", arr[3]);
	return 0;
}
output: Some Garbage value

#include<stdio.h>
int main()
{
	int a, b, c;	
	int arr[5] = {1, 2, 3, 25, 7};
	a = ++arr[1];
	b = arr[1]++;
	c = arr[a++];
	printf("%d--%d--%d", a, b, c);
	return 0;
}
output:4 3 25

int arr[5]={1,3,5,7,11};
int *ptr,*ptr1;
ptr=&arr;
ptr1=*ptr+3;
printf("%d %d",*ptr,ptr1);
op:1,4

#include<stdio.h>
int main()
{
	int arr[5] = {1, 3, 5, 7, 11};
	int *ptr, *ptr1;
	ptr = &arr;
	ptr1 = *ptr + 3;
	printf("%d--%d", *ptr, ptr1);	
}
output:1 4

#include<stdio.h>
int main()
{
	int arr[5] = { 1, 3, 5, 7, 11 };
	int *ptr;
	ptr = &arr;
	printf("%d", *ptr + 1);
}
output:2


#include<stdio.h>
int main()
{
	static char *arr[ ]  = {"bike", "bus", "car", "van"};
	char **ptr[ ] = {arr+3, arr+2, arr+1, arr};
	char ***p;
	p = ptr;
	**++p;
	printf("%s",*--*++p + 2);
}
output:ke

#include<stdio.h>
int main()
{
	int arr[1] = {2};
	printf("%d", 0[arr]);
	return 0;
}
output:2


#include<stdio.h>
void array(int **p);
int main()
{
	int arr[2][3] = {{3, 6, 9 }, {12, 15, 18}};
	int *ptr;
	ptr = &arr;
	array(&ptr);
	return 0;
}
void array(int **p)
{
	printf("%d", **p);
}
output:3

#include<stdio.h>
int main()
{
	int arr[3], i = 0;
	while(i < 3)
	{
		arr[i] = ++i;
	}
	for(i=0; i<3; i++)
	{
		printf("%d--", arr[i]);
	}
return 0;
}
output=Garbage value--1--2--

write a program to display frequency of each element of the array?
input: 1 2 3 4 2 4
output:1 2 1 2
program:
#include<stdio.h>
#include<limits.h>
int main()
{
	int n,c=0,i,j;
	scanf("%d",&n);
	int a[n];
	for(int i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    for(i=0;i<n;i++)
    {
        c=1;
        for(j=i+1;j<n;j++)
        {
            if(a[i]==INT_MAX)
            {
                continue;
            }

            if(a[i]==a[j])
            {
                c++;
                a[j]=INT_MAX;
            }
        }
        if(a[i]!=INT_MAX)
        {
                printf("%d ",c);
        }
    }
	return 0;
}


write a logic two sorted arrays?
input:
3 3
2 4 6
3 5 7
output:2 3 4 5 6 7
program:
#include<stdio.h>
#include<limits.h>
int main()
{
	int n,m,i,j,l;
	scanf("%d",&m);
	int a[n];
	scanf("%d",&n);
	int b[n];
	int k=m+n;
	int c[k];
	for(int i=0;i<m;i++)
    {
        scanf("%d",&a[i]);
    }
    for(int i=0;i<n;i++)
    {
        scanf("%d",&b[i]);
    }
    l=0,i=0,j=0;
    while(i<m && j<n)
    {
        if(a[i]<b[j])
        {
            c[l++]=a[i++];
        }
        else{
            c[l++]=b[j++];
        }
    }
    while(i<m)
    {
        c[l++]=a[i++];
    }
    while(j<n)
    {
        c[l++]=b[j++];
    }
    for(i=0;i<l;i++)
    {
        printf("%d ",c[i]);
    }
	return 0;
}


write a program to rotate the array right side n positions? 
input=1,2,3,4,5
n=3
output=4 5 1 2 3 4 
program:
#include<stdio.h>
#include<limits.h>
int main()
{
	int n,m,i,j,l,k;
	scanf("%d",&n);
	int a[n];
	for(int i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    scanf("%d",&k);
    k=k%n;
    for(int i=k;i<n;i++)
    {
        printf("%d ",a[i]);
    }
    for(int i=0;i<k;i++)
    {
        printf("%d ",a[i]);
    }
	return 0;
}



write a program to fin mind and max values in the array?
input=7 5 1 2 9
output=1 9
program:
#include<stdio.h>
#include<limits.h>
int main()
{
	int n,min,max;
	scanf("%d",&n);
	int a[n];
	min=INT_MAX;
    max=INT_MIN;
	for(int i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    for(int i=0;i<n;i++)
    {
        if(a[i]>max)
            max=a[i];
        if(a[i]<min)
            min=a[i];
    }
    printf("min: %d max: %d",min,max);
	return 0;
}


write a program to reverse the string witout using any string library functions?
input=hello
output=olloeh
program:
#include<stdio.h>
#include<limits.h>
int main()
{
	char str[50];
	int c=0;
	scanf("%[^\n]s",str);
	while(str[c]!='\0')
    {
        c++;
    }
    for(int i=c-1;i>=0;i--)
    {
        printf("%c",str[i]);
    }
	return 0;
}


Write a program to determine the length of the longest pattern with consecutive incresing numbers in the array,when two such patterns of same 
max size are found ,return sum numbers of the pattern whose sum is greater

explanation:
Given array[1,3,2,5,7,9,12,13,2,4,3,0],the length of such pattern is 6
i.e[2,5,7,9,12,13]
program:
#include<stdio.h>
#include<limits.h>
int main()
{
	int n,c,k=0;
	scanf("%d",&n);
	int a[n];
	int r[n];
	for(int i=0;i<n;i++)
    {
        r[i]=0;
    }
	for(int i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }

    k=0;
    int i=0;
    while(i<n-1)
    {
        c=1;
        while(a[i]<a[i+1] && i<n-1)
        {
            c++;
            i++;
        }
        r[k++]=c;
        c=1;
        i++;
    }
    int max=INT_MIN;
    for(int i=0;i<k;i++)
    {
        if(r[i]>max)
            max=r[i];
    }
    printf("%d ",max);
	return 0;
}



1
2 9
3 8 12
4 7 11 14
5 6 10 13 15

write a program to convert the digits of the given numbers into binary foramts
7 8 9 6
0111
1000
1001
0110


